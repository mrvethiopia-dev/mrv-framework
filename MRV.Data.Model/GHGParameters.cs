//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace MRV.Data.Model
{
    public partial class GHGParameters
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string ParameterID
        {
            get;
            set;
        }
    
        public virtual int SectorId
        {
            get { return _sectorId; }
            set
            {
                if (_sectorId != value)
                {
                    if (GHGSectors != null && GHGSectors.Id != value)
                    {
                        GHGSectors = null;
                    }
                    _sectorId = value;
                }
            }
        }
        private int _sectorId;
    
        public virtual int DataTypeId
        {
            get { return _dataTypeId; }
            set
            {
                if (_dataTypeId != value)
                {
                    if (GHGDataTypes != null && GHGDataTypes.Id != value)
                    {
                        GHGDataTypes = null;
                    }
                    _dataTypeId = value;
                }
            }
        }
        private int _dataTypeId;
    
        public virtual int GHGTypeId
        {
            get { return _gHGTypeId; }
            set
            {
                if (_gHGTypeId != value)
                {
                    if (GHGTypes != null && GHGTypes.Id != value)
                    {
                        GHGTypes = null;
                    }
                    _gHGTypeId = value;
                }
            }
        }
        private int _gHGTypeId;
    
        public virtual int UnitId
        {
            get { return _unitId; }
            set
            {
                if (_unitId != value)
                {
                    if (GHGUnits != null && GHGUnits.Id != value)
                    {
                        GHGUnits = null;
                    }
                    _unitId = value;
                }
            }
        }
        private int _unitId;
    
        public virtual bool IsDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<GHGDataEntryDetail> GHGDataEntryDetail
        {
            get
            {
                if (_gHGDataEntryDetail == null)
                {
                    var newCollection = new FixupCollection<GHGDataEntryDetail>();
                    newCollection.CollectionChanged += FixupGHGDataEntryDetail;
                    _gHGDataEntryDetail = newCollection;
                }
                return _gHGDataEntryDetail;
            }
            set
            {
                if (!ReferenceEquals(_gHGDataEntryDetail, value))
                {
                    var previousValue = _gHGDataEntryDetail as FixupCollection<GHGDataEntryDetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGHGDataEntryDetail;
                    }
                    _gHGDataEntryDetail = value;
                    var newValue = value as FixupCollection<GHGDataEntryDetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGHGDataEntryDetail;
                    }
                }
            }
        }
        private ICollection<GHGDataEntryDetail> _gHGDataEntryDetail;
    
        public virtual GHGDataTypes GHGDataTypes
        {
            get { return _gHGDataTypes; }
            set
            {
                if (!ReferenceEquals(_gHGDataTypes, value))
                {
                    var previousValue = _gHGDataTypes;
                    _gHGDataTypes = value;
                    FixupGHGDataTypes(previousValue);
                }
            }
        }
        private GHGDataTypes _gHGDataTypes;
    
        public virtual GHGSectors GHGSectors
        {
            get { return _gHGSectors; }
            set
            {
                if (!ReferenceEquals(_gHGSectors, value))
                {
                    var previousValue = _gHGSectors;
                    _gHGSectors = value;
                    FixupGHGSectors(previousValue);
                }
            }
        }
        private GHGSectors _gHGSectors;
    
        public virtual GHGTypes GHGTypes
        {
            get { return _gHGTypes; }
            set
            {
                if (!ReferenceEquals(_gHGTypes, value))
                {
                    var previousValue = _gHGTypes;
                    _gHGTypes = value;
                    FixupGHGTypes(previousValue);
                }
            }
        }
        private GHGTypes _gHGTypes;
    
        public virtual GHGUnits GHGUnits
        {
            get { return _gHGUnits; }
            set
            {
                if (!ReferenceEquals(_gHGUnits, value))
                {
                    var previousValue = _gHGUnits;
                    _gHGUnits = value;
                    FixupGHGUnits(previousValue);
                }
            }
        }
        private GHGUnits _gHGUnits;

        #endregion

        #region Association Fixup
    
        private void FixupGHGDataTypes(GHGDataTypes previousValue)
        {
            if (previousValue != null && previousValue.GHGParameters.Contains(this))
            {
                previousValue.GHGParameters.Remove(this);
            }
    
            if (GHGDataTypes != null)
            {
                if (!GHGDataTypes.GHGParameters.Contains(this))
                {
                    GHGDataTypes.GHGParameters.Add(this);
                }
                if (DataTypeId != GHGDataTypes.Id)
                {
                    DataTypeId = GHGDataTypes.Id;
                }
            }
        }
    
        private void FixupGHGSectors(GHGSectors previousValue)
        {
            if (previousValue != null && previousValue.GHGParameters.Contains(this))
            {
                previousValue.GHGParameters.Remove(this);
            }
    
            if (GHGSectors != null)
            {
                if (!GHGSectors.GHGParameters.Contains(this))
                {
                    GHGSectors.GHGParameters.Add(this);
                }
                if (SectorId != GHGSectors.Id)
                {
                    SectorId = GHGSectors.Id;
                }
            }
        }
    
        private void FixupGHGTypes(GHGTypes previousValue)
        {
            if (previousValue != null && previousValue.GHGParameters.Contains(this))
            {
                previousValue.GHGParameters.Remove(this);
            }
    
            if (GHGTypes != null)
            {
                if (!GHGTypes.GHGParameters.Contains(this))
                {
                    GHGTypes.GHGParameters.Add(this);
                }
                if (GHGTypeId != GHGTypes.Id)
                {
                    GHGTypeId = GHGTypes.Id;
                }
            }
        }
    
        private void FixupGHGUnits(GHGUnits previousValue)
        {
            if (previousValue != null && previousValue.GHGParameters.Contains(this))
            {
                previousValue.GHGParameters.Remove(this);
            }
    
            if (GHGUnits != null)
            {
                if (!GHGUnits.GHGParameters.Contains(this))
                {
                    GHGUnits.GHGParameters.Add(this);
                }
                if (UnitId != GHGUnits.Id)
                {
                    UnitId = GHGUnits.Id;
                }
            }
        }
    
        private void FixupGHGDataEntryDetail(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GHGDataEntryDetail item in e.NewItems)
                {
                    item.GHGParameters = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GHGDataEntryDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.GHGParameters, this))
                    {
                        item.GHGParameters = null;
                    }
                }
            }
        }

        #endregion

    }
}
