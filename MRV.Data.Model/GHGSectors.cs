//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace MRV.Data.Model
{
    public partial class GHGSectors
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ParentId
        {
            get { return _parentId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentId != value)
                    {
                        if (GHGSectors2 != null && GHGSectors2.Id != value)
                        {
                            GHGSectors2 = null;
                        }
                        _parentId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _parentId;
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual bool CanCaptureData
        {
            get;
            set;
        }
    
        public virtual bool IsDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<GHGParameters> GHGParameters
        {
            get
            {
                if (_gHGParameters == null)
                {
                    var newCollection = new FixupCollection<GHGParameters>();
                    newCollection.CollectionChanged += FixupGHGParameters;
                    _gHGParameters = newCollection;
                }
                return _gHGParameters;
            }
            set
            {
                if (!ReferenceEquals(_gHGParameters, value))
                {
                    var previousValue = _gHGParameters as FixupCollection<GHGParameters>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGHGParameters;
                    }
                    _gHGParameters = value;
                    var newValue = value as FixupCollection<GHGParameters>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGHGParameters;
                    }
                }
            }
        }
        private ICollection<GHGParameters> _gHGParameters;
    
        public virtual ICollection<GHGSectors> GHGSectors1
        {
            get
            {
                if (_gHGSectors1 == null)
                {
                    var newCollection = new FixupCollection<GHGSectors>();
                    newCollection.CollectionChanged += FixupGHGSectors1;
                    _gHGSectors1 = newCollection;
                }
                return _gHGSectors1;
            }
            set
            {
                if (!ReferenceEquals(_gHGSectors1, value))
                {
                    var previousValue = _gHGSectors1 as FixupCollection<GHGSectors>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGHGSectors1;
                    }
                    _gHGSectors1 = value;
                    var newValue = value as FixupCollection<GHGSectors>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGHGSectors1;
                    }
                }
            }
        }
        private ICollection<GHGSectors> _gHGSectors1;
    
        public virtual GHGSectors GHGSectors2
        {
            get { return _gHGSectors2; }
            set
            {
                if (!ReferenceEquals(_gHGSectors2, value))
                {
                    var previousValue = _gHGSectors2;
                    _gHGSectors2 = value;
                    FixupGHGSectors2(previousValue);
                }
            }
        }
        private GHGSectors _gHGSectors2;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupGHGSectors2(GHGSectors previousValue)
        {
            if (previousValue != null && previousValue.GHGSectors1.Contains(this))
            {
                previousValue.GHGSectors1.Remove(this);
            }
    
            if (GHGSectors2 != null)
            {
                if (!GHGSectors2.GHGSectors1.Contains(this))
                {
                    GHGSectors2.GHGSectors1.Add(this);
                }
                if (ParentId != GHGSectors2.Id)
                {
                    ParentId = GHGSectors2.Id;
                }
            }
            else if (!_settingFK)
            {
                ParentId = null;
            }
        }
    
        private void FixupGHGParameters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GHGParameters item in e.NewItems)
                {
                    item.GHGSectors = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GHGParameters item in e.OldItems)
                {
                    if (ReferenceEquals(item.GHGSectors, this))
                    {
                        item.GHGSectors = null;
                    }
                }
            }
        }
    
        private void FixupGHGSectors1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GHGSectors item in e.NewItems)
                {
                    item.GHGSectors2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GHGSectors item in e.OldItems)
                {
                    if (ReferenceEquals(item.GHGSectors2, this))
                    {
                        item.GHGSectors2 = null;
                    }
                }
            }
        }

        #endregion

    }
}
